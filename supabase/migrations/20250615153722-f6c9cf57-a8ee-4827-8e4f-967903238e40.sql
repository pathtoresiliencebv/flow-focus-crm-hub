
-- Create a new ENUM type for permissions to ensure consistency across the application.
CREATE TYPE public.app_permission AS ENUM (
    'customers_view', 'customers_edit', 'customers_delete',
    'projects_view', 'projects_edit', 'projects_delete',
    'invoices_view', 'invoices_edit', 'invoices_delete',
    'users_view', 'users_edit', 'users_delete',
    'reports_view', 'settings_edit'
);

-- Create a table to map roles to their specific permissions.
CREATE TABLE public.role_permissions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role public.user_role NOT NULL,
    permission public.app_permission NOT NULL,
    -- Ensure a role can only have a specific permission once to avoid duplicates.
    UNIQUE (role, permission)
);

-- Enable Row Level Security on the new table to control access.
ALTER TABLE public.role_permissions ENABLE ROW LEVEL SECURITY;

-- Helper function to get the role of the currently authenticated user.
CREATE OR REPLACE FUNCTION public.get_user_role(p_user_id uuid)
RETURNS public.user_role AS $$
DECLARE
  user_role public.user_role;
BEGIN
  -- This function runs with the permissions of the user who defined it,
  -- allowing it to securely access the profiles table.
  SELECT role INTO user_role FROM public.profiles WHERE id = p_user_id;
  RETURN user_role;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- RLS Policy: Allow any authenticated user to read the permission mappings.
-- This is necessary for the frontend to display and manage roles correctly.
CREATE POLICY "Allow authenticated read access to role_permissions"
ON public.role_permissions
FOR SELECT
TO authenticated
USING (true);

-- RLS Policy: Only allow users with the 'Administrator' role to make changes.
CREATE POLICY "Allow Admins to manage permissions"
ON public.role_permissions
FOR ALL
TO authenticated
USING (public.get_user_role(auth.uid()) = 'Administrator')
WITH CHECK (public.get_user_role(auth.uid()) = 'Administrator');

-- Populate the table with the default permissions, migrating the logic from the old frontend store.
INSERT INTO public.role_permissions (role, permission) VALUES
('Administrator', 'customers_view'), ('Administrator', 'customers_edit'), ('Administrator', 'customers_delete'),
('Administrator', 'projects_view'), ('Administrator', 'projects_edit'), ('Administrator', 'projects_delete'),
('Administrator', 'invoices_view'), ('Administrator', 'invoices_edit'), ('Administrator', 'invoices_delete'),
('Administrator', 'users_view'), ('Administrator', 'users_edit'), ('Administrator', 'users_delete'),
('Administrator', 'reports_view'), ('Administrator', 'settings_edit'),
('Verkoper', 'customers_view'), ('Verkoper', 'customers_edit'), ('Verkoper', 'projects_view'),
('Verkoper', 'projects_edit'), ('Verkoper', 'invoices_view'), ('Verkoper', 'invoices_edit'),
('Verkoper', 'reports_view'),
('Installateur', 'customers_view'), ('Installateur', 'projects_view'), ('Installateur', 'projects_edit'),
('Installateur', 'reports_view'),
('Administratie', 'customers_view'), ('Administratie', 'projects_view'), ('Administratie', 'invoices_view'),
('Administratie', 'invoices_edit'), ('Administratie', 'reports_view'),
('Bekijker', 'customers_view'), ('Bekijker', 'projects_view'), ('Bekijker', 'invoices_view'),
('Bekijker', 'reports_view');

-- Create a database function to atomically update all permissions for a given role.
-- This will be used by the Role Management component in the frontend.
CREATE OR REPLACE FUNCTION public.update_role_permissions(
    p_role public.user_role,
    p_permissions public.app_permission[]
)
RETURNS void AS $$
BEGIN
    -- This function can only be executed by an Administrator.
    IF public.get_user_role(auth.uid()) <> 'Administrator' THEN
        RAISE EXCEPTION 'Only Administrators can update role permissions.';
    END IF;

    -- Start by deleting all existing permissions for the specified role.
    DELETE FROM public.role_permissions WHERE role = p_role;
    
    -- Insert the new set of permissions from the provided array.
    IF array_length(p_permissions, 1) > 0 THEN
        INSERT INTO public.role_permissions (role, permission)
        SELECT p_role, unnest(p_permissions);
    END IF;
END;
$$ LANGUAGE plpgsql;

