// Build configuration for Android
android {
    compileSdkVersion 34
    
    defaultConfig {
        applicationId "nl.smanscrm.app"
        minSdkVersion 22
        targetSdkVersion 34
        versionCode getVersionCode()
        versionName getVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged APK.
             ignoreAssetsPattern "!.svn:!.git:.*:!CVS:!thumbs.db:!picasa.ini:!*.scc:*~"
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // Signing config
            if (project.hasProperty('ANDROID_KEYSTORE_FILE')) {
                signingConfig signingConfigs.release
            }
        }
        staging {
            initWith release
            debuggable true
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
        }
    }

    // Signing configurations
    signingConfigs {
        release {
            if (project.hasProperty('ANDROID_KEYSTORE_FILE')) {
                storeFile file(project.property('ANDROID_KEYSTORE_FILE'))
                storePassword project.property('ANDROID_KEYSTORE_PASSWORD')
                keyAlias project.property('ANDROID_KEY_ALIAS')
                keyPassword project.property('ANDROID_KEY_PASSWORD')
            }
        }
    }

    // Flavors for different environments
    productFlavors {
        production {
            dimension "environment"
            applicationId "nl.smanscrm.app"
            resValue "string", "app_name", "Smans CRM"
            buildConfigField "String", "API_BASE_URL", '"https://api.smanscrm.nl"'
            buildConfigField "String", "SUPABASE_URL", '"' + getSupabaseUrl() + '"'
        }
        staging {
            dimension "environment"
            applicationId "nl.smanscrm.app.staging"
            resValue "string", "app_name", "Smans CRM (Staging)"
            buildConfigField "String", "API_BASE_URL", '"https://staging-api.smanscrm.nl"'
            buildConfigField "String", "SUPABASE_URL", '"' + getSupabaseUrlStaging() + '"'
        }
        development {
            dimension "environment"
            applicationId "nl.smanscrm.app.dev"
            resValue "string", "app_name", "Smans CRM (Dev)"
            buildConfigField "String", "API_BASE_URL", '"https://dev-api.smanscrm.nl"'
            buildConfigField "String", "SUPABASE_URL", '"' + getSupabaseUrlDev() + '"'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'
    }

    // Bundle configuration
    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
}

// Helper functions
def getVersionCode() {
    def code = project.hasProperty('VERSION_CODE') ? project.property('VERSION_CODE').toInteger() : 1
    println "Using version code: $code"
    return code
}

def getVersionName() {
    def name = project.hasProperty('VERSION_NAME') ? project.property('VERSION_NAME') : "1.0.0"
    println "Using version name: $name"
    return name
}

def getSupabaseUrl() {
    return project.hasProperty('SUPABASE_URL') ? project.property('SUPABASE_URL') : ""
}

def getSupabaseUrlStaging() {
    return project.hasProperty('SUPABASE_URL_STAGING') ? project.property('SUPABASE_URL_STAGING') : getSupabaseUrl()
}

def getSupabaseUrlDev() {
    return project.hasProperty('SUPABASE_URL_DEV') ? project.property('SUPABASE_URL_DEV') : getSupabaseUrl()
}